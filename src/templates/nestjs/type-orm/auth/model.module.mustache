import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm'
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { ConfigService } from '@nestjs/config';
import { JwtStrategy } from './strategies/jwt.strategy';
import { LocalStrategy } from './strategies/local.strategy';
import { LocalAuthGuard } from './guards/local-auth.guard';
import { AuthController } from './auth.controller'
import { AuthService } from './auth.service'
{{&routeEntityTable}}
@Module({
  imports: [
    TypeOrmModule.forFeature([{{tableEntity}}]),
    PassportModule.register({
        defaultStrategy:'jwt'
      }),
      JwtModule.registerAsync({
        inject: [ConfigService],
        useFactory: (config:ConfigService) =>({
            secret:config.get<string>('JWT_SECRET'),
            signOptions:{expiresIn:'1h'}
        }),
      }),
],
  controllers: [
    AuthController,
  ],
  providers: [AuthService,LocalStrategy, JwtStrategy],
})
export class AuthModule {}